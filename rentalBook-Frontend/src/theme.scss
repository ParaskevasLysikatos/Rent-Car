@use '@angular/material' as mat;
@use './theme-style.scss' as styles;
@include mat.strong-focus-indicators();

@include mat.core();

// Define a light theme
$light-primary: mat.define-palette(mat.$teal-palette);
$light-accent: mat.define-palette(mat.$amber-palette);
$light-theme: mat.define-light-theme((
 color: (
   primary: $light-primary,
   accent: $light-accent,
 )
));

// Define a dark theme
$dark-primary: mat.define-palette(mat.$pink-palette);
$dark-accent: mat.define-palette(mat.$blue-gray-palette);
$dark-theme: mat.define-dark-theme((
 color: (
   primary: $dark-primary,
   accent: $dark-accent,
 )
));

// Apply the light theme only when the `.my-light-theme` CSS class is applied
// to an ancestor element of the components (such as `body`).
body {
  @include mat.all-component-themes($light-theme);
  // @include mat.strong-focus-indicators-theme($light-theme);
  @include styles.theme($light-theme);
}


.dark-theme {
  // Apply the dark theme by default
  @include mat.all-component-themes($dark-theme);
  // @include mat.strong-focus-indicators-theme($dark-theme);
  @include styles.theme($dark-theme);
}

// Emit theme-dependent styles for common features used across multiple components.
// @include mat.core-theme($my-theme);

// // Emit styles for MatButton based on `$my-theme`. Because the configuration
// // passed to `define-light-theme` omits typography, `button-theme` will not
// // emit any typography styles.
// @include mat.button-theme($my-theme);
